#日志级别 ERROR>WARN>INFO>DEBUG
# 把指定级别的日志信息输出到指定的一个或者多个位置. 这里我们把INFO层级以及以上的信息输出到Console和File;
# , File, DailyRollingFile, RollingFile, DFile, EFILE
log4j.rootLogger=DEBUG, Console

# 常用的 Appender
# org.apache.log4j.ConsoleAppender（控制台）
# org.apache.log4j.FileAppender（文件）
# org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
# org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
# org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

# 常用的 Loyout
# org.apache.log4j.HTMLLayout（以HTML表格形式布局）
# org.apache.log4j.PatternLayout（可以灵活地指定布局模式）  重点了解
# org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串）
# org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#Console
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n


#File
#log4j.appender.File = org.apache.log4j.FileAppender
#log4j.appender.File.File = D://log//log.log
#log4j.appender.File.layout = org.apache.log4j.PatternLayout
#log4j.appender.File.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n

#DailyRollingFile
#log4j.appender.DailyRollingFile = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.DailyRollingFile.File = D://log//log3.log
#log4j.appender.DailyRollingFile.layout = org.apache.log4j.PatternLayout
#log4j.appender.DailyRollingFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n

#RollingFile
#log4j.appender.RollingFile = org.apache.log4j.RollingFileAppender
#log4j.appender.RollingFile.File = D://log//log4.log
##MaxFileSize 是日志文件的最大尺寸
#log4j.appender.RollingFile.MaxFileSize=1KB
##MaxBackupIndex是日志文件的个数，假如超过了，则覆盖，主要考虑到的是硬盘的容量问题；根据实际需求来定 比如 100  500
#log4j.appender.RollingFile.MaxBackupIndex=3
#log4j.appender.RollingFile.layout = org.apache.log4j.PatternLayout
##-5表示p这列占5个字符位置，不足的不空格 目的就是为了对齐
#log4j.appender.RollingFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n

#ConversionPattern属性，灵活配置输出属性：
#  %m 输出代码中指定的消息
#  %M 输出打印该条日志的方法名
#  %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#  %r 输出自应用启动到输出该log信息耗费的毫秒数
#  %c 输出所属的类目，通常就是所在类的全名
#  %t 输出产生该日志事件的线程名
#  %n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”
#  %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
#  %l 输出日志事件的发生位置，及在代码中的行数；

#DEBUGFile
#log4j.appender.DFile = org.apache.log4j.FileAppender
#log4j.appender.DFile.File = D://log//DEBUG.log
#log4j.appender.DFile.layout = org.apache.log4j.PatternLayout
#log4j.appender.DFile.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
#log4j.appender.DFile.Threshold = DEBUG

#ERRORFile
#log4j.appender.EFILE = org.apache.log4j.FileAppender
#log4j.appender.EFILE.File = D://log//ERROR.log
#log4j.appender.EFILE.layout = org.apache.log4j.PatternLayout
#log4j.appender.EFILE.layout.ConversionPattern =%d [%t] %-5p [%c] - %m%n
#log4j.appender.EFILE.Threshold = ERROR

# Threshold属性
# hreshold属性可以指定日志level
# 比如我们指定某个appender的Threshold为WARN，那这个appender输出的日志信息就是WARN级别以及WARN以上的级别
# 注意：有个提前 rootLogger里配置的level比如小于Threshold层级否则无效 还是按照总的rootLogger里的level来输出

# Append 属性 默认是true
# log4j.appender.FIEL.Append = false