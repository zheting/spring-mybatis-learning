<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace 是接口全类名 -->
<mapper namespace="cn.java.money.mapper.EmployeeMapper">

    <!-- 因为settings中配置 mapUnderscoreToCamelCase=true (默认是false)， 因此last_name 能够映射到 lastName-->
    <!-- 因为配置typeAliases,所以resultType可以写别名 Employee-->
    <!--  databaseId="mysql" 指定该条sql在那个数据库产品执行 -->
    <!-- 该条sql 不是通过接口和mapper关联以后查询的，而是通过 java代码直接关联查询的-->
    <select id="selectEmp" resultType="emp" databaseId="mysql">
        select *
        from tbl_employee
        where id = #{id}
    </select>

    <!-- id 是方法名   -->
    <select id="getEmployeeById" resultType="emp">
        select id, last_name as lastName, email, gender
        from tbl_employee
        where id = #{id}
    </select>

    <!--
        获取自增主键值：
            useGeneratedKeys="true"使用自增主键获取主键值策略， JDBC Statement.getGeneratedKeys()
            keyProperty="id" 指定对应的主键属性，也就是mybatis获取主键以后，将这个值封装给java bean的那个属性
    -->
    <insert id="addEmployee" useGeneratedKeys="true" keyProperty="id" databaseId="mysql">
        insert into tbl_employee (last_name, email, gender)
        values (#{lastName}, #{email}, #{gender})
    </insert>

    <!--
        Oracle不支持自增，可以使用序列模拟自增
    -->
    <insert id="addEmployee" useGeneratedKeys="true" keyProperty="id" databaseId="oracle">
        <!--
            keyProperty 查出的主键封装给Java bean 的那个属性
            order="BEFORE" 当前sql在插入sql之前运行
        -->
        <!--<selectKey keyProperty="id" order="BEFORE" resultType="integer">
            select EMPLOYEES_SEQ.nextval from dual
        </selectKey>
        insert into tbl_employee (id,last_name,email,gender)
        values (#{id},#{lastName},#{email},#{gender})
        -->

        <selectKey keyProperty="id" order="AFTER" resultType="integer">
            select EMPLOYEES_SEQ.currval from dual
        </selectKey>

        insert into tbl_employee (id,last_name,email,gender)
        values (EMPLOYEES_SEQ.nextval,#{lastName},#{email},#{gender})
    </insert>


    <update id="updateEmployee">
        update tbl_employee
        set last_name = #{lastName},
            email     = #{email},
            gender    = #{gender}
        where id = #{id}
    </update>

    <delete id="deleteEmployee">
        delete
        from tbl_employee
        where id = #{id}
    </delete>

    <select id="getEmployeeByIdAndLastName" resultType="emp">
        <!-- select id, last_name as lastName, email, gender from tbl_employee  where id = #{arg0} and last_name = #{arg1}  -->
        <!-- select id, last_name,  email, gender from tbl_employee  where id = #{param1} and last_name = #{param2} -->
        <!-- @Param 命名参数-->
        select id, last_name, email, gender from tbl_employee where id = #{id} and last_name = #{lastName}
    </select>

    <select id="getEmployeeByIdAndLastName2" resultType="emp">
        select id, last_name, email, gender
        from tbl_employee
        where id = #{id}
          and last_name = #{lastName}
    </select>

    <select id="getEmployeeByIdAndLastName3" resultType="emp">
        select id, last_name, email, gender
        from tbl_employee
        where id = #{id}
          and last_name = #{lastName}
    </select>

    <!--返回多个元素的时候，resultType的值是集合中元素的类型-->
    <select id="getEmployeeByLastName" resultType="emp">
        select id, last_name, email, gender
        from tbl_employee
        where last_name = #{lastName}
    </select>

    <!--返回值是单条记录 map
        key(就是属性名称) : vlaue
         gender=男,
         last_name=tom,
         id=2,
         email=tom@qq.com
    -->
    <select id="getEmployeeByIdReturnMap" resultType="map">
        select id, last_name, email, gender
        from tbl_employee
        where id = #{id}
    </select>

    <!--返回多条记录的map:  Map<Integer,Employee>
        resultType是map value的类型
        @MapKey("id") 标明那一列作为key
    -->
    <select id="getEmployeeByLastNameReturnMap" resultType="emp">
        select id, last_name, email, gender
        from tbl_employee
        where last_name = #{lastName}
    </select>

    <!--
        #{key} 预编译，防止sql注入
        ${key} sql直接拼接，会有安全问题
        大部分情况下使用#{}， 但是当原生JDBC不支持占位符的地方可以使用${}
        比如：按年份分表，表名就是 年份_salary,此时年份就是动态的，但是表名不支持占位符，因此要使用${}
             比如排序的字段和升序降序都不支持占位符 order by ${f_name} ${order}

         #{}中更多的配置
         javaType
         jdbcType
            通常需要在某种特定的条件下被设置
            比如：在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。
                    例如oracle就会报错 JdbcType OTHER 无效的类型； 因为mybatis多所有的null都映射的是原生JDBC的OTHER类型，因此oracle不能正确处理
                      #{email，jdbcType=NULL}  在源码java.sql.JDBCType中可以找OTHER(Types.OTHER),NULL(Types.NULL)
             全局配置settings中有一个配置项 jdbcTypeForNull默认值是OTHER,因此可以在setting中设置jdbcTypeForNull=NULL
         mode(存储过程)
         numericScale
         resultMap
         typeHandler
         jdbcTypeName
         expression
    -->

    <!-- 自定义某个JavaBean的封装规则
            type: 自定义规则的Java 类型
            id: 规则的名称，便于被引用
    -->
    <resultMap id="MyEmp" type="cn.java.money.entity.Employee">
        <!--id 标签定义主键，底层会有优化-->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其他不指定的列会自动封装 -->
    </resultMap>

    <!--resultMap 和 resultType 不可以同时使用-->
    <!-- resultMap 比 settings中配置的 mapUnderscoreToCamelCase 优先级高-->
    <select id="getEmployeeByLastName2" resultMap="MyEmp">
        select id, last_name, email, gender
        from tbl_employee
        where last_name = #{lastName}
    </select>

    <!-- 通过外键 级联属性 -->
    <resultMap id="MyEmp2" type="cn.java.money.entity.Employee2">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="dept_id" property="department.id"/>
        <result column="dept_name" property="department.deptName"/>
    </resultMap>

    <!-- association标签定义级联属性 -->
    <resultMap id="MyEmp3" type="cn.java.money.entity.Employee2">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <association property="department" javaType="cn.java.money.entity.Department">
            <result column="dept_id" property="id"/>
            <result column="dept_name" property="deptName"/>
        </association>
    </resultMap>

    <select id="getEmpAndDept" resultMap="MyEmp3">
        select e.id id, e.last_name, e.email email, e.gender gender, d.id dept_id, d.dept_name dept_Name
        from tbl_employee e,
             tbl_dept d
        where e.id = d.id
          and e.id = #{id}
    </select>

    <!--
        使用association进行分步查询
        1.0 根据员工id查询员工信息
        2.0 根据员工信息中的部门id 查询部门信息
        3.0 部门设置给员工

    -->
    <resultMap id="MyEmp4" type="cn.java.money.entity.Employee2">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <!--
            select : 表示要调用哪个方法
            colum: 给方法传参数，这里就是把employee中的dep_id传给getDepartmentById
            property: 把select的查询结果赋值给Employee2的department属性
        -->
        <association property="department" select="cn.java.money.mapper.DepartmentMapper.getDepartmentById"
                     column="dep_id"/>
    </resultMap>
    <select id="getEmpAndDept2" resultMap="MyEmp4">
        select id, last_name, email, gender, dep_id
        from tbl_employee
        where id = #{id}
    </select>

    <!-- 懒加载、延时加载、按需加载
        分步查询的基础上加上如下配置settings就可以开启延时加载：
            <setting name="lazyLoadingEnabled" value="true"/>
            <setting name="aggressiveLazyLoading" value="false"/>
    -->


    <select id="getEmpByDepId" resultType="Employee2">
        select id, last_name, email, gender, dep_id
        from tbl_employee
        where dep_id = #{dep_id}
    </select>

    <!--

       鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为。
       模拟场景： 如果查询出的是女生，就把部门信息查询出来，否则不查询
                如果是男生，把last_name这一列的值赋给email
    -->
    <resultMap id="MyEmp5" type="cn.java.money.entity.Employee2">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <!--
            column： 指定判定的列名
            javaType: 列值对应的类型
        -->
        <discriminator javaType="string" column="gender">
            <case value="男" resultType="Employee2">
                <id column="id" property="id"/>
                <result column="last_name" property="email"/>
            </case>
            <case value="女" resultType="Employee2">
                <association property="department" select="cn.java.money.mapper.DepartmentMapper.getDepartmentById"
                             column="dep_id"/>
            </case>
        </discriminator>
    </resultMap>

    <select id="getEmpAndDept3" resultMap="MyEmp5">
        select id, last_name, email, gender, dep_id
        from tbl_employee
        where id = #{id}
    </select>

    <!--======================================= 动态SQL =========================================================================================-->

    <!-- 动态sql
        if 中使用的OGNL
        choose(when,otherwise)
        trim(where,set)
        foreach
    -->
    <select id="getEmployeeByConditionIf" resultType="Employee2">
        select * from tbl_employee /*where 1=1*/
        <where>/*只能去掉紧跟在where以后的第一个and 或 or*/
            <if test="id!=null">
                and id=#{id}
            </if>
            <if test="lastName!=null and lastName!=''">
                and last_name = #{lastName}
            </if>
            <if test="email!=null and email.trim() != ''">
                and email = #{email}
            </if>
            <if test="gender == '男'.toString() or gender == '女'.toString()">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <!--
        trim 标签体中是整个字符串拼接的结果
        prefix: 给拼接后的整个字符串加一个前缀
        prefixOverrides: 去掉整个字符串前面多余的字符
        suffix：给拼接后的整个字符串加一个后缀
        suffixOverrides:去掉整个字符串后面多余的字符
    -->
    <select id="getEmployeeByConditionTrim" resultType="Employee2">
        select * from tbl_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="lastName!=null and lastName!=''">
                last_name = #{lastName} and
            </if>
            <if test="email!=null and email.trim() != ''">
                email = #{email} and
            </if>
            <if test="gender == '男'.toString() or gender == '女'.toString()">
                gender = #{gender} and
            </if>
        </trim>
    </select>

    <select id="getEmployeeByConditionChoose" resultType="Employee2">
        select * from tbl_employee
        <where>
            /*相当于switch case。只会进入其中一个分支，多个条件满足，只进入第一个满足条件的分支*/
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="lastName!=null and lastName!=''">
                    last_name = #{lastName}
                </when>
                <when test="email!=null and email.trim() != ''">
                    email = #{email}
                </when>
                <otherwise>
                    gender = '女'
                </otherwise>
            </choose>
        </where>
    </select>

   <!--  set可以去掉逗号, 推荐set中不加逗号  也可以使用trim <trim prefix="set" suffixOverrides="," -->
    <update id="updateEmployeeByCondation">
        update tbl_employee
        <set>
            <if test="lastName!=null and lastName!=''">
                 last_name = #{lastName},
            </if>
            <if test="email!=null and email.trim() != ''">
                 email = #{email}
            </if>
            <if test="gender == '男'.toString() or gender == '女'.toString()">
                 gender = #{gender}
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="getEmpsByConditionForeach" resultType="Employee2">
        select * from tbl_employee where id in /*(2,3,4)*/
        <!--
            collection指定要遍历的集合
                list类型的参数会特殊处理封装在map中，map的key就是list
            item 将当前遍历出的元素赋值给指定的变量
            open 遍历出所有结果拼接一个开始的字符
            close 遍历出所有结果拼接一个结束的字符
            index: 索引， 遍历list的时候index表示的就是索引，item就是当前值
                         遍历map的时候index表示的就是map的key， item就是map的值
            #{变量名}
        -->
        <foreach collection="ids" item="item_id" separator="," open="(" close=")">
                #{item_id}
        </foreach>
    </select>

    <!-- insert into tbl_employee (last_name,email,gender, dep_id) values ('jack','jack@qq.com','男',1),('rockall','rockall@qq.com','男',1),('grace','grace@qq.com','男',1); -->
    <insert id="saveAllEmps">
        insert into tbl_employee (last_name,email,gender, dep_id) values
        <foreach collection="list" item="emp" separator=",">
            (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>

    <!--
        insert into tbl_employee (last_name,email,gender, dep_id) values ('jack','jack@qq.com','男',1);
        insert into tbl_employee (last_name,email,gender, dep_id) values ('rockall','rockall@qq.com','男',1);
    -->
    <!-- 注意要设置mysql allowMultiQueries=true -->
    <!--这种多条sql的执行，也可以应用于批量删除，批量修改，批量增加-->
    <insert id="saveAllEmps2">
        <foreach collection="list" item="emp" separator=";">
            insert into tbl_employee (last_name,email,gender, dep_id) values  (#{emp.lastName},#{emp.email},#{emp.gender},#{emp.department.id})
        </foreach>
    </insert>

    <!--oracle不支持 values(),(),()
     oracle 批量保存：
     方式一：多个insert放在 begin end之间
        begin
         insert into tbl_employee (last_name,email,gender, dep_id) values ('jack','jack@qq.com','男',1);
         insert into tbl_employee (last_name,email,gender, dep_id) values ('rockall','rockall@qq.com','男',1);
        end;
     方式二：利用中间表
        insert into tbl_employee(id,last_name,email,gender, dep_id)
            select employee.nextval. lastName, email, gender, dep_id from(
                select 'jack','java@qq.com','女', 1 from dual
                union
                select 'jack1','java1@qq.com','女', 1 from dual
                ....
               )
       方式三：
    -->

</mapper>